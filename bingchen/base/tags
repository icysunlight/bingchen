!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BINGCHEN_BASE_COPYABLE	copyable.h	2;"	d
BINGCHEN_BASE_TIMESTAMP	TimeStamp.h	2;"	d
Bar	Thread_unittest.cc	/^    Bar(int x) : x_(x) {}$/;"	f	class:Bar
Bar	Thread_unittest.cc	/^class Bar {$/;"	c	file:
Bar	tests/Thread_unittest.cc	/^    Bar(int x) : x_(x) {}$/;"	f	class:Bar
Bar	tests/Thread_unittest.cc	/^class Bar {$/;"	c	file:
BlockingQueue	BlockingQueue.h	/^    BlockingQueue()$/;"	f	class:bingchen::BlockingQueue
BlockingQueue	BlockingQueue.h	/^class BlockingQueue $/;"	c	namespace:bingchen
BoundedBlockingQueue	BoundedBlockingQueue.h	/^    explicit BoundedBlockingQueue(int maxSize)$/;"	f	class:bingchen::BoundedBlockingQueue
BoundedBlockingQueue	BoundedBlockingQueue.h	/^class BoundedBlockingQueue$/;"	c	namespace:bingchen
Condition	Condition.h	/^    Condition(MutexLock& mutex)$/;"	f	class:bingchen::Condition
Condition	Condition.h	/^class Condition : public boost::noncopyable$/;"	c	namespace:bingchen
CountDown	CountDownLatch.h	/^    void CountDown() {$/;"	f	class:bingchen::CountDownLatch
CountDownLatch	CountDownLatch.h	/^    explicit CountDownLatch(int count)$/;"	f	class:bingchen::CountDownLatch
CountDownLatch	CountDownLatch.h	/^class CountDownLatch$/;"	c	namespace:bingchen
CurrentThread	CurrentThread.h	/^namespace CurrentThread $/;"	n	namespace:bingchen
CurrentThread	Thread.cc	/^namespace CurrentThread {$/;"	n	namespace:bingchen	file:
MutexLock	MutexLock.h	/^    MutexLock() {$/;"	f	class:bingchen::MutexLock
MutexLock	MutexLock.h	/^class MutexLock : public boost::noncopyable$/;"	c	namespace:bingchen
MutexLockGuard	MutexLock.h	/^    MutexLockGuard(MutexLock& mutexlock) $/;"	f	class:bingchen::MutexLockGuard
MutexLockGuard	MutexLock.h	/^class MutexLockGuard : public boost::noncopyable$/;"	c	namespace:bingchen
Task	ThreadPool.h	/^    typedef boost::function<void ()> Task;$/;"	t	class:bingchen::ThreadPool
Thread	Thread.cc	/^Thread::Thread(const Thread::ThreadFunc& func,const std::string& name) :$/;"	f	class:Thread
Thread	Thread.h	/^class Thread : public boost::noncopyable$/;"	c	namespace:bingchen
ThreadFun	tests/MutexLock_unittest.cc	/^void ThreadFun() {$/;"	f
ThreadFunc	Thread.h	/^    typedef boost::function<void ()> ThreadFunc;$/;"	t	class:bingchen::Thread
ThreadNameInit	Thread.cc	/^    ThreadNameInit() {$/;"	f	class:ThreadNameInit
ThreadNameInit	Thread.cc	/^class ThreadNameInit{$/;"	c	file:
ThreadPool	ThreadPool.h	/^    ThreadPool(const string& name = "ThreadPool") $/;"	f	class:bingchen::ThreadPool
ThreadPool	ThreadPool.h	/^class ThreadPool$/;"	c	namespace:bingchen
TimeStamp	TimeStamp.h	/^    TimeStamp()$/;"	f	class:bingchen::TimeStamp
TimeStamp	TimeStamp.h	/^    explicit TimeStamp(int64_t microSecondsSinceEpoc)$/;"	f	class:bingchen::TimeStamp
TimeStamp	TimeStamp.h	/^class TimeStamp : public bingchen::copyable$/;"	c	namespace:bingchen
UnAssignGuard	MutexLock.h	/^        UnAssignGuard(MutexLock& mutexlock)$/;"	f	class:bingchen::MutexLock::UnAssignGuard
UnAssignGuard	MutexLock.h	/^    class UnAssignGuard $/;"	c	class:bingchen::MutexLock
__BINGCHEN_BASE_ATOMIC	atomic.h	2;"	d
__BINGCHEN_BASE_BLOCKINGQUEUE_H_	BlockingQueue.h	2;"	d
__BINGCHEN_BASE_BOUNDEDBLOCKINGQUEUE_	BoundedBlockingQueue.h	2;"	d
__BINGCHEN_BASE_CONDITION_H_	Condition.h	2;"	d
__BINGCHEN_BASE_COUNTDOWNLATCH_H_	CountDownLatch.h	2;"	d
__BINGCHEN_BASE_MUTEXLOCK_H_	MutexLock.h	2;"	d
__BINGCHEN_BASE_THREADPOOL_	ThreadPool.h	2;"	d
__BINGCHEN_CURRENTTHREAD_H_	CurrentThread.h	2;"	d
__BINGCHEN_EXCEPTION_H_	exception.h	2;"	d
__BINGCHEN_THREAD_H_	Thread.h	2;"	d
__STDC_FORMAT_MACROS	TimeStamp.cc	1;"	d	file:
__STDC_FORMAT_MACROS	TimeStamp.cc	3;"	d	file:
addAndGet	atomic.h	/^    T addAndGet(T x) {$/;"	f	class:bingchen::base::atomicInt
addTime	TimeStamp.h	/^inline TimeStamp addTime(TimeStamp timestamp,double seconds) {$/;"	f	namespace:bingchen
assignHolder	MutexLock.h	/^    void assignHolder() {$/;"	f	class:bingchen::MutexLock
atomicInt	atomic.h	/^    atomicInt() : val_(0) {$/;"	f	class:bingchen::base::atomicInt
atomicInt	atomic.h	/^class atomicInt : public boost::noncopyable $/;"	c	namespace:bingchen::base
atomicInt32	atomic.h	/^typedef base::atomicInt<int32_t> atomicInt32;$/;"	t	namespace:bingchen
atomicInt64	atomic.h	/^typedef base::atomicInt<int64_t> atomicInt64;$/;"	t	namespace:bingchen
backTrace_	exception.h	/^    std::string backTrace_;$/;"	m	class:bingchen::exception
bar	tests/exception_unittest.cpp	/^class bar {$/;"	c	file:
base	atomic.h	/^namespace base {$/;"	n	namespace:bingchen
bingchen	BlockingQueue.h	/^namespace bingchen {$/;"	n
bingchen	BoundedBlockingQueue.h	/^namespace bingchen {$/;"	n
bingchen	Condition.h	/^namespace bingchen {$/;"	n
bingchen	CountDownLatch.h	/^namespace bingchen {$/;"	n
bingchen	CurrentThread.h	/^namespace bingchen $/;"	n
bingchen	MutexLock.h	/^namespace bingchen {$/;"	n
bingchen	Thread.cc	/^namespace bingchen {$/;"	n	file:
bingchen	Thread.h	/^namespace bingchen{$/;"	n
bingchen	ThreadPool.h	/^namespace bingchen {$/;"	n
bingchen	TimeStamp.h	/^namespace bingchen {$/;"	n
bingchen	atomic.h	/^namespace bingchen {$/;"	n
bingchen	copyable.h	/^namespace bingchen {$/;"	n
bingchen	exception.h	/^namespace bingchen {$/;"	n
cacheTid	Thread.cc	/^void cacheTid() {$/;"	f	namespace:bingchen::CurrentThread
capacity	BoundedBlockingQueue.h	/^    int capacity() const {$/;"	f	class:bingchen::BoundedBlockingQueue
cond_	Condition.h	/^    pthread_cond_t cond_;$/;"	m	class:bingchen::Condition
cond_	CountDownLatch.h	/^    Condition cond_;$/;"	m	class:bingchen::CountDownLatch
copyable	copyable.h	/^class copyable{$/;"	c	namespace:bingchen
count_	CountDownLatch.h	/^    int count_;$/;"	m	class:bingchen::CountDownLatch
decrement	atomic.h	/^    void decrement(T x) {$/;"	f	class:bingchen::base::atomicInt
decrementAndGet	atomic.h	/^    T decrementAndGet() {$/;"	f	class:bingchen::base::atomicInt
empty	BoundedBlockingQueue.h	/^    bool empty() const{$/;"	f	class:bingchen::BoundedBlockingQueue
exception	Exception.cc	/^exception::exception(const char* msg)$/;"	f	class:exception
exception	Exception.cc	/^exception::exception(const std::string& msg) $/;"	f	class:exception
exception	exception.h	/^class exception : public std::exception$/;"	c	namespace:bingchen
fillBackTrace	Exception.cc	/^void exception::fillBackTrace() {$/;"	f	class:exception
foo	tests/exception_unittest.cpp	/^        int foo() {$/;"	f	class:bar
full	BoundedBlockingQueue.h	/^    bool full() const {$/;"	f	class:bingchen::BoundedBlockingQueue
full	ThreadPool.cc	/^bool ThreadPool::full() {$/;"	f	class:ThreadPool
func_	Thread.h	/^    ThreadFunc func_;$/;"	m	class:bingchen::Thread
g_mutex	tests/MutexLock_unittest.cc	/^MutexLock g_mutex;$/;"	v
g_vec	tests/MutexLock_unittest.cc	/^std::vector<int> g_vec;$/;"	v
get	atomic.h	/^    T get() {$/;"	f	class:bingchen::base::atomicInt
getAndAdd	atomic.h	/^    T getAndAdd(T x) {$/;"	f	class:bingchen::base::atomicInt
getAndSet	atomic.h	/^    T getAndSet(T x) {$/;"	f	class:bingchen::base::atomicInt
getBackTrace	Exception.cc	/^const char* exception::getBackTrace() const throw() {$/;"	f	class:exception
getCount	CountDownLatch.h	/^    int getCount() const {$/;"	f	class:bingchen::CountDownLatch
getPthreadMutex	MutexLock.h	/^    pthread_mutex_t* getPthreadMutex() {$/;"	f	class:bingchen::MutexLock
holder_	MutexLock.h	/^    pid_t holder_;$/;"	m	class:bingchen::MutexLock
increment	atomic.h	/^    void increment() {$/;"	f	class:bingchen::base::atomicInt
incrementAndGet	atomic.h	/^    T incrementAndGet() {$/;"	f	class:bingchen::base::atomicInt
invalid	TimeStamp.h	/^    static TimeStamp invalid() {$/;"	f	class:bingchen::TimeStamp
isInvalid	TimeStamp.h	/^    bool isInvalid() {$/;"	f	class:bingchen::TimeStamp
isLocked	MutexLock.h	/^    bool isLocked() {$/;"	f	class:bingchen::MutexLock
join	Thread.cc	/^int Thread::join() {$/;"	f	class:Thread
joined_	Thread.h	/^    bool joined_;$/;"	m	class:bingchen::Thread
kCount	tests/MutexLock_unittest.cc	/^const int kCount = 1000;$/;"	v
kMicroSecondsPerSecond	TimeStamp.h	/^    const static int kMicroSecondsPerSecond = 1000 * 1000;$/;"	m	class:bingchen::TimeStamp
lock	MutexLock.h	/^    void lock() {$/;"	f	class:bingchen::MutexLock
main	Thread_unittest.cc	/^int main() {$/;"	f
main	tests/BlockingQueue_unittest.cc	/^int main()$/;"	f
main	tests/BoundedBlockingQueue_unittest.cc	/^int main() {$/;"	f
main	tests/CountDownLatch_unittest.cc	/^int main() {$/;"	f
main	tests/MutexLock_unittest.cc	/^int main() {$/;"	f
main	tests/ThreadPool_test.cc	/^int main() {$/;"	f
main	tests/Thread_unittest.cc	/^int main() {$/;"	f
main	tests/atomic_unittest.cc	/^int main() {$/;"	f
main	tests/exception_unittest.cpp	/^int main() {$/;"	f
maxQueueSize_	ThreadPool.h	/^    int maxQueueSize_;$/;"	m	class:bingchen::ThreadPool
message_	exception.h	/^    std::string message_;$/;"	m	class:bingchen::exception
microSecondsSinceEpoc	TimeStamp.h	/^    int64_t microSecondsSinceEpoc() const {$/;"	f	class:bingchen::TimeStamp
microSecondsSinceEpoc_	TimeStamp.h	/^    int64_t microSecondsSinceEpoc_;$/;"	m	class:bingchen::TimeStamp
mutexLock_	MutexLock.h	/^    MutexLock& mutexLock_;$/;"	m	class:bingchen::MutexLockGuard
mutex_	BlockingQueue.h	/^    MutexLock mutex_;$/;"	m	class:bingchen::BlockingQueue
mutex_	BoundedBlockingQueue.h	/^    mutable MutexLock mutex_;$/;"	m	class:bingchen::BoundedBlockingQueue
mutex_	Condition.h	/^    MutexLock& mutex_;$/;"	m	class:bingchen::Condition
mutex_	CountDownLatch.h	/^    mutable MutexLock mutex_;$/;"	m	class:bingchen::CountDownLatch
mutex_	MutexLock.h	/^    pthread_mutex_t mutex_;$/;"	m	class:bingchen::MutexLock
mutex_	ThreadPool.h	/^    MutexLock mutex_;$/;"	m	class:bingchen::ThreadPool
mutexcond_	CountDownLatch.h	/^    MutexLock mutexcond_;$/;"	m	class:bingchen::CountDownLatch
mutexlock_	MutexLock.h	/^        MutexLock& mutexlock_;$/;"	m	class:bingchen::MutexLock::UnAssignGuard
name	Thread.h	/^    std::string name() {return name_;}$/;"	f	class:bingchen::Thread
name_	Thread.h	/^    std::string name_;$/;"	m	class:bingchen::Thread
name_	ThreadPool.h	/^    std::string name_;$/;"	m	class:bingchen::ThreadPool
notEmpty	ThreadPool.cc	/^bool ThreadPool::notEmpty() {$/;"	f	class:ThreadPool
notEmpty_	BlockingQueue.h	/^    Condition notEmpty_;$/;"	m	class:bingchen::BlockingQueue
notEmpty_	BoundedBlockingQueue.h	/^    Condition notEmpty_;$/;"	m	class:bingchen::BoundedBlockingQueue
notEmpty_	ThreadPool.h	/^    Condition notEmpty_;$/;"	m	class:bingchen::ThreadPool
notFull_	BoundedBlockingQueue.h	/^    Condition notFull_;$/;"	m	class:bingchen::BoundedBlockingQueue
notFull_	ThreadPool.h	/^    Condition notFull_;$/;"	m	class:bingchen::ThreadPool
notify	Condition.h	/^    int notify() {$/;"	f	class:bingchen::Condition
notifyAll	Condition.h	/^    int notifyAll() {$/;"	f	class:bingchen::Condition
now	TimeStamp.h	/^    static TimeStamp now() {$/;"	f	class:bingchen::TimeStamp
numCreated	Thread.h	/^    int numCreated() {return numCreated_.get();}$/;"	f	class:bingchen::Thread
numCreated_	Thread.cc	/^atomicInt32 Thread::numCreated_;$/;"	m	class:Thread	file:
numCreated_	Thread.h	/^    static atomicInt32 numCreated_;$/;"	m	class:bingchen::Thread
operator <	TimeStamp.h	/^    bool operator < (const TimeStamp& that) const {$/;"	f	class:bingchen::TimeStamp
operator ==	TimeStamp.h	/^    bool operator == (const TimeStamp& that) const {$/;"	f	class:bingchen::TimeStamp
preThreadFunc	tests/CountDownLatch_unittest.cc	/^void preThreadFunc(CountDownLatch* latch) {$/;"	f
pthreadId_	Thread.h	/^    pthread_t pthreadId_;$/;"	m	class:bingchen::Thread
put	BlockingQueue.h	/^    void put(T x) {$/;"	f	class:bingchen::BlockingQueue
put	BoundedBlockingQueue.h	/^    void put(const T& x) {$/;"	f	class:bingchen::BoundedBlockingQueue
put	ThreadPool.cc	/^void ThreadPool::put(const Task& task) {$/;"	f	class:ThreadPool
que_	BlockingQueue.h	/^    std::deque<T> que_;$/;"	m	class:bingchen::BlockingQueue
queue_	BoundedBlockingQueue.h	/^    boost::circular_buffer<T> queue_;$/;"	m	class:bingchen::BoundedBlockingQueue
queue_	ThreadPool.h	/^    std::queue<Task> queue_;$/;"	m	class:bingchen::ThreadPool
run	Thread.cc	/^void* Thread::run(void* arg) { $/;"	f	class:Thread
runInThread	ThreadPool.cc	/^void ThreadPool::runInThread() {$/;"	f	class:ThreadPool
running_	ThreadPool.h	/^    bool running_;$/;"	m	class:bingchen::ThreadPool
secondsSinceEpoch	TimeStamp.h	/^    time_t secondsSinceEpoch() {$/;"	f	class:bingchen::TimeStamp
setDefaultName	Thread.cc	/^void Thread::setDefaultName() {$/;"	f	class:Thread
setMaxQueueSize	ThreadPool.cc	/^void ThreadPool::setMaxQueueSize(int maxSize) {$/;"	f	class:ThreadPool
size	BlockingQueue.h	/^    int size() {$/;"	f	class:bingchen::BlockingQueue
size	BoundedBlockingQueue.h	/^    int size() const {$/;"	f	class:bingchen::BoundedBlockingQueue
start	Thread.cc	/^void Thread::start() {$/;"	f	class:Thread
start	ThreadPool.cc	/^void ThreadPool::start(int numThreads) {$/;"	f	class:ThreadPool
started_	Thread.h	/^    bool started_;$/;"	m	class:bingchen::Thread
stop	ThreadPool.cc	/^void ThreadPool::stop() {$/;"	f	class:ThreadPool
swap	TimeStamp.h	/^    void swap(TimeStamp& that) {$/;"	f	class:bingchen::TimeStamp
t_cachedTid	Thread.cc	/^    __thread pid_t t_cachedTid = 0;$/;"	m	namespace:bingchen::CurrentThread	file:
t_threadName	Thread.cc	/^    __thread const char* t_threadName;$/;"	m	namespace:bingchen::CurrentThread	file:
t_tidString	Thread.cc	/^    __thread char t_tidString[32];$/;"	m	namespace:bingchen::CurrentThread	file:
take	BlockingQueue.h	/^    T take() {$/;"	f	class:bingchen::BlockingQueue
take	BoundedBlockingQueue.h	/^    T take() {$/;"	f	class:bingchen::BoundedBlockingQueue
take	ThreadPool.cc	/^ThreadPool::Task ThreadPool::take() {$/;"	f	class:ThreadPool
test	tests/exception_unittest.cpp	/^void test() {$/;"	f
threadFun1	Thread_unittest.cc	/^    void threadFun1() {$/;"	f	class:Bar
threadFun1	Thread_unittest.cc	/^void threadFun1() {$/;"	f
threadFun1	tests/Thread_unittest.cc	/^    void threadFun1() {$/;"	f	class:Bar
threadFun1	tests/Thread_unittest.cc	/^void threadFun1() {$/;"	f
threadFun2	Thread_unittest.cc	/^    void threadFun2(int a) {$/;"	f	class:Bar
threadFun2	Thread_unittest.cc	/^void threadFun2(int a) {$/;"	f
threadFun2	tests/Thread_unittest.cc	/^    void threadFun2(int a) {$/;"	f	class:Bar
threadFun2	tests/Thread_unittest.cc	/^void threadFun2(int a) {$/;"	f
threadFunc	tests/ThreadPool_test.cc	/^int threadFunc(int num) {$/;"	f
threadNameInit	Thread.cc	/^ThreadNameInit threadNameInit;$/;"	v
threadname	Thread.cc	/^const char* threadname() {$/;"	f	namespace:bingchen::CurrentThread
threads_	ThreadPool.h	/^    boost::ptr_vector<Thread> threads_;$/;"	m	class:bingchen::ThreadPool
tid	Thread.cc	/^pid_t tid() {$/;"	f	namespace:bingchen::CurrentThread
tid	Thread.h	/^    pid_t tid() {return tid_;}$/;"	f	class:bingchen::Thread
tidString	Thread.cc	/^const char* tidString() {$/;"	f	namespace:bingchen::CurrentThread
tid_	Thread.h	/^    pid_t tid_;$/;"	m	class:bingchen::Thread
timeDifference	TimeStamp.h	/^inline double timeDifference(TimeStamp high,TimeStamp low) {$/;"	f	namespace:bingchen
timedWait	Condition.h	/^    int timedWait(int seconds) {$/;"	f	class:bingchen::Condition
toFormattedString	TimeStamp.cc	/^string TimeStamp::toFormattedString(bool showMicroSeconds) const {$/;"	f	class:TimeStamp
toString	TimeStamp.cc	/^string TimeStamp::toString() const {$/;"	f	class:TimeStamp
unAssignHolder	MutexLock.h	/^    void unAssignHolder() {$/;"	f	class:bingchen::MutexLock
unlock	MutexLock.h	/^    void unlock() {$/;"	f	class:bingchen::MutexLock
val_	atomic.h	/^    T val_;$/;"	m	class:bingchen::base::atomicInt
wait	Condition.h	/^    int wait() {$/;"	f	class:bingchen::Condition
wait	CountDownLatch.h	/^    void wait() {$/;"	f	class:bingchen::CountDownLatch
waitingThreadFunc	tests/CountDownLatch_unittest.cc	/^void waitingThreadFunc(CountDownLatch* latch) {$/;"	f
what	Exception.cc	/^const char* exception::what() const throw() {$/;"	f	class:exception
x_	Thread_unittest.cc	/^    int x_;$/;"	m	class:Bar	file:
x_	tests/Thread_unittest.cc	/^    int x_;$/;"	m	class:Bar	file:
~Condition	Condition.h	/^    ~Condition() {$/;"	f	class:bingchen::Condition
~MutexLock	MutexLock.h	/^    ~MutexLock() {$/;"	f	class:bingchen::MutexLock
~MutexLockGuard	MutexLock.h	/^    ~MutexLockGuard(){$/;"	f	class:bingchen::MutexLockGuard
~Thread	Thread.cc	/^Thread::~Thread() {$/;"	f	class:Thread
~ThreadPool	ThreadPool.cc	/^ThreadPool::~ThreadPool(){$/;"	f	class:ThreadPool
~UnAssignGuard	MutexLock.h	/^        ~UnAssignGuard() {$/;"	f	class:bingchen::MutexLock::UnAssignGuard
~exception	Exception.cc	/^exception::~exception() throw() {$/;"	f	class:exception
